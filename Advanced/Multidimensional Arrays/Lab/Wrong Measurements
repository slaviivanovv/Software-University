package MultidimentionalArraysLab;

import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class Wrong_Measurements_08 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int rows = Integer.parseInt(scanner.nextLine());

        int[][] matrix = new int[rows][];
        fillMatrix(scanner, matrix);

        int[][] clone = cloneMatrix(matrix);


        int[] mistakenValueIndexes = fillArray(scanner);
        int mistakenValue = matrix[mistakenValueIndexes[0]][mistakenValueIndexes[1]];

        for (int i = 0; i < clone.length; i++) {
            int[] arr = clone[i];

            for (int j = 0; j < arr.length; j++) {
                int element = arr[j];
                int sum = 0;

                if (element == mistakenValue) {
                    boolean hasTopValue = i != 0;
                    boolean hasBottomValue = i != matrix.length - 1;
                    boolean hasLeftValue = j != 0;
                    boolean hasRightValue = j != arr.length - 1;

                    matrix[i][j] = sumValues(sum, i, j, clone, hasTopValue, hasBottomValue, hasLeftValue, hasRightValue, mistakenValue);
                }
            }
        }

        printMatrix(matrix);

    }

    private static void printMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            int[] arr = matrix[i];

            for (int element : arr) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
    }


    public static int sumValues (int sum, int i, int j, int[][] clone, boolean hasTopValue, boolean hasBottomValue, boolean hasLeftValue, boolean hasRightValue, int value) {
        if (hasTopValue) {
            int topValue = clone[i - 1][j];
            if (topValue != value) {
                sum += topValue;
            }
        }

        if (hasBottomValue) {
            int bottomValue = clone[i + 1][j];
            if (bottomValue != value) {
                sum += bottomValue;
            }
        }

        if (hasLeftValue) {
            int leftValue = clone[i][j - 1];
            if (leftValue != value) {
                sum += leftValue;
            }
        }

        if(hasRightValue) {
            int rightValue = clone[i][j + 1];
            if (rightValue != value) {
                sum += rightValue;
            }
        }

        return sum;
    }

    public static int[][] cloneMatrix(int[][] matrix) {
        int[][] clone = new int[matrix.length][];
        for (int i = 0; i < matrix.length; i++) {
            clone[i] = Arrays.copyOf(matrix[i], matrix[i].length);
        }
        return clone;
    }

    public static int[] fillArray(Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split(" "))
                .mapToInt(Integer::parseInt)
                .toArray();
    }

    public static int[][] fillMatrix(Scanner scanner, int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            int[] arr = fillArray(scanner);
            matrix[i] = arr;
        }
        return matrix;
    }

}
