package MultidimentionalArraysLab;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Print_Diagonals_Of_Square_Matrix_06 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());

        int[][] matrix = new int[n][n];
        fillMatrix(scanner, matrix);

        List<Integer> firstDiagonal = new ArrayList<>();
        fillFirstDiagonal(firstDiagonal, matrix, scanner);

        List<Integer> secondDiagonal = new ArrayList<>();
        fillSecondDiagonal(secondDiagonal, matrix, scanner);

        printOutput(firstDiagonal, secondDiagonal);

    }

    public static void printOutput (List<Integer> firstDiagonal, List<Integer> secondDiagonal){
        for(int number : firstDiagonal){
            System.out.print(number + " ");
        }

        System.out.println();

        for(int number : secondDiagonal){
            System.out.print(number + " ");
        }
    }

    public static List<Integer> fillSecondDiagonal(List<Integer> secondDiagonal, int[][] matrix, Scanner scanner) {
        int i = matrix.length - 1;
        int j = 0;
        while (i >= 0) {
            int col = matrix[i][j];
            secondDiagonal.add(col);
            i--;
            j++;
        }
        return secondDiagonal;
    }

    public static List<Integer> fillFirstDiagonal(List<Integer> firstDiagonal, int[][] matrix, Scanner scanner) {
        for (int i = 0; i < matrix.length; i++) {
            int row = matrix[i][i];
            firstDiagonal.add(row);

        }
        return firstDiagonal;
    }

    public static int[] fillArray(Scanner scanner) {
        return Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();
    }

    public static int[][] fillMatrix(Scanner scanner, int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            int[] arr = fillArray(scanner);
            matrix[i] = arr;
        }

        return matrix;
    }
}
