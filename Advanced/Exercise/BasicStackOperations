package StackAndQueuesExercise;

import java.util.*;

public class Basic_Stack_Operations_02 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int[] array = Arrays.stream(scanner.nextLine()
                        .split(" "))
                .mapToInt(Integer::parseInt).toArray();

        ArrayDeque<Integer> numbersStack = new ArrayDeque<>(array[0]);


        Arrays.stream(scanner.nextLine().split("\\s++"))
                .map(Integer::parseInt)
                .forEach(numbersStack::push);

        int popCount = array[1];

        for (int i = 0; i < popCount; i++) {
            numbersStack.pop();
        }

        int element = array[2];

        if (doesExist(element, numbersStack)) {
            System.out.println("true");
        } else {
            if (numbersStack.isEmpty()) {
                System.out.println(0);
            } else {
                System.out.println(smallestNumber(numbersStack));
            }
        }


    }

    public static boolean doesExist(int element, ArrayDeque<Integer> numbersStack) {

        if (!numbersStack.contains(element)) {
            return false;
        }

        return true;
    }

    public static int smallestNumber (ArrayDeque<Integer> numbersStack) {

        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>(numbersStack);

       return priorityQueue.peek();
    }
}
